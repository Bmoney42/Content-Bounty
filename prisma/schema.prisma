// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CREATOR)
  bio           String?
  socialLinks   String?
  walletAddress String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  campaigns       Campaign[]
  tasks           Task[]
  earnings        Earning[]
  taskApplications TaskApplication[]
  bounties        Bounty[] @relation("BusinessBounties")
  assignedBounties Bounty[] @relation("AssignedBounties")
  bountyApplications BountyApplication[]
  notifications   Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  description String
  budget      Float
  currency    String   @default("USD")
  status      CampaignStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user  User   @relation(fields: [userId], references: [id])
  tasks Task[]
}

model Task {
  id             String     @id @default(cuid())
  title          String
  description    String
  reward         Float
  currency       String     @default("USD")
  status         TaskStatus @default(OPEN)
  maxParticipants Int       @default(1)
  currentParticipants Int   @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  campaignId     String
  assignedTo     String?

  campaign     Campaign @relation(fields: [campaignId], references: [id])
  assignedUser User?    @relation(fields: [assignedTo], references: [id])
  earnings     Earning[]
  applications TaskApplication[]
}

model Earning {
  id        String   @id @default(cuid())
  amount    Float
  currency  String
  status    EarningStatus @default(PENDING)
  createdAt DateTime @default(now())
  paidAt    DateTime?
  stripePaymentIntentId String?
  userId    String
  taskId    String

  user User @relation(fields: [userId], references: [id])
  task Task @relation(fields: [taskId], references: [id])
  bounty Bounty? @relation(fields: [taskId], references: [id])
}

enum UserRole {
  CREATOR
  BUSINESS
  ADMIN
  DEMO
}

enum CampaignStatus {
  ACTIVE
  PAUSED
  COMPLETED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
}

enum EarningStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELLED
}

model TaskApplication {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  status    ApplicationStatus @default(PENDING)
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model Bounty {
  id             String     @id @default(cuid())
  title          String
  description    String
  reward         Float
  currency       String     @default("USD")
  status         BountyStatus @default(OPEN)
  maxParticipants Int       @default(1)
  currentParticipants Int   @default(0)
  bountyType     BountyType @default(CONTENT_CREATION)
  requirements   String?
  deadline       DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  businessId     String
  assignedTo     String?

  business     User       @relation("BusinessBounties", fields: [businessId], references: [id])
  assignedUser User?      @relation("AssignedBounties", fields: [assignedTo], references: [id])
  earnings     Earning[]
  applications BountyApplication[]
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
  EXPIRED
}

enum BountyType {
  CONTENT_CREATION
  PRODUCT_REVIEW
  SOCIAL_MEDIA_POST
  VIDEO_CREATION
  PHOTOGRAPHY
  INFLUENCER_MARKETING
  CUSTOM
}

model BountyApplication {
  id        String   @id @default(cuid())
  bountyId  String
  userId    String
  status    ApplicationStatus @default(PENDING)
  message   String?
  portfolio String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bounty Bounty @relation(fields: [bountyId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([bountyId, userId])
}

model Notification {
  id         String   @id @default(cuid())
  type       String   // e.g., 'bounty_approved', 'payment_received', 'application_received'
  title      String
  message    String
  read       Boolean  @default(false)
  relatedId  String?  // ID of related bounty, earning, etc.
  relatedType String? // Type of related item
  createdAt  DateTime @default(now())
  userId     String

  user User @relation(fields: [userId], references: [id])
}
